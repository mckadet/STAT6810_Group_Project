# or
library(gridExtra)
library(gstat)
library(sp)
library(lattice)
# pull in data
data(jura)
summary(prediction.dat)
summary(validation.dat)
summary(transect.dat)
summary(juragrid.dat)
# rename pred and grid
jura.pred = prediction.dat
jura.grid = juragrid.dat
# give labels to integer values
jura.pred$Landuse = factor(prediction.dat$Landuse,
labels=levels(juragrid.dat$Landuse))
jura.pred$Rock = factor(prediction.dat$Rock,
labels=levels(juragrid.dat$Rock))
# convert to spatial dataframes
coordinates(jura.pred) = ~Xloc+Yloc
coordinates(jura.grid) = ~Xloc+Yloc
gridded(jura.grid) = TRUE
# sample plots of target variables
spplot(jura.pred, 'Cu')
spplot(jura.pred, 'Cd', main = "Cd Concentration Levels")
spplot(jura.pred, 'Pb')
# using inverse distance weighting method to predict values for target variables
cop.raw <- idw(Cu ~ 1, jura.pred, jura.grid)
spplot(cop.raw['var1.pred'])
cad.raw <- idw(Cd ~ 1, jura.pred, jura.grid)
spplot(cad.raw['var1.pred'], main = "Predicted Cd Concentration (using inverse distance)")
lead.raw <- idw(Pb ~ 1, jura.pred, jura.grid)
spplot(lead.raw['var1.pred'])
# display variograms for each of the target variables
cop.vgm <- variogram(Cu ~ 1, jura.pred)
plot(cop.vgm)
cad.vgm <- variogram(Cd ~ 1, jura.pred)
plot(cad.vgm)
lead.vgm <- variogram(Pb ~ 1, jura.pred)
plot(lead.vgm)
# nickel
plot(Cd ~ Ni, jura.pred)
plot(Cd ~ sqrt(Ni), jura.pred)
abline(lm(Cd ~ sqrt(Ni), jura.pred))
plot(log(Cd) ~ log(Ni), jura.pred)
plot(log(Cd) ~ sqrt(Ni), jura.pred)
abline(lm(log(Cd) ~ log(Ni), jura.pred))
# Cr
plot(Cd ~ Cr, jura.pred)
plot(log(Cd) ~ log(Cr), jura.pred)
# Co
plot(Cd ~ Co, jura.pred)
# Zinc
plot(Cd ~ Zn, jura.pred)
plot(Cd ~ log(Zn), jura.pred)
plot(log(Cd) ~ sqrt(Zn), jura.pred)
plot(log(Cd) ~ log(Zn), jura.pred)
# plot variogram of log(Cd) and give it a model, i chose exponential
lcd.vgm <- variogram(log(Cd) ~ 1, jura.pred, cutoff = 1.6)
lcd.fit <- fit.variogram(lcd.vgm, model = vgm("Exp"))
plot(lcd.vgm, lcd.fit)
# plot variogram of residuals
lcdr.vgm <- variogram(log(Cd) ~ log(Zn), jura.pred, cutoff = 1.6)
lcdr.fit <- fit.variogram(lcdr.vgm, model = vgm("Exp"))
plot(lcdr.vgm, lcdr.fit)
# kriging
lcd.kriged <- krige(log(Cd) ~ 1, jura.pred, jura.grid, model = lcd.fit)
lcdr.kriged <- krige(log(Cd) ~ log(Zn), jura.pred, jura.grid, model = lcdr.fit)
spplot(lcd.kriged["var1.pred"], main = "Kriging Prediction of Cadmium without Regression")
spplot(lcdr.kriged["var1.pred"], main = "Kriging Prediction of Cadmium with Regression")
xyplot(jura.pred$Cd ~ jura.pred$Zn, jura.pred,
main = "Cd by Zinc Concentration",
xlab = "Zinc Concentration",
ylab = "Cd Concentration")
xyplot(log(jura.pred$Cd) ~ log(jura.pred$Zn), jura.pred, main = "Logged Cd by Logged Zinc") # This is great to use as justification for why we transformed both vars
library(ggplot2)
ggplot(as.data.frame(jura.pred), aes(x = Zn, y = Cd)) +
geom_point(col = "blue", alpha = 0.5, size = 2.5) +
geom_smooth(col = "grey", se = F, method = "lm") +
theme_bw() +
ggtitle("Unlogged") +
xlab("Zinc") +
ylab("Cadmium")
ggplot(as.data.frame(jura.pred), aes(x = log(Zn), y = log(Cd))) +
geom_point(col = "blue", alpha = 0.5, size = 2.5) +
geom_smooth(col = "grey", se = F, method = "lm") +
theme_bw() +
ggtitle("Logged") +
xlab("log(Zinc)") +
ylab("log(Cadmium)")
# build gstat object with data
jura.g <- gstat(NULL, id = "Cd", formula = log(Cd) ~ 1, data = jura.pred, nmax = 10)
jura.g <- gstat(jura.g, id = "Zn", formula = log(Zn) ~ 1, data = jura.pred, nmax = 10)
# plot variogram from fitted model
x <- variogram(jura.g)
plot(x)
x <- variogram(jura.g, cutoff = 1.3)
jura.fit <- fit.lmc(x, jura.g, vgm(1, "Exp", 1.2, 1))
plot(x, jura.fit)
jura.g <- gstat(jura.g, model = vgm(1, "Exp", 1.2, 1), fill.all = T)
jura.g <- fit.lmc(x, jura.g)
cz <- predict(jura.g, jura.grid)
# plot the prediction results
pl1=spplot(cz["Cd.pred"],main="log-cadmium prediction")
print(pl1,split=c(1,1,2,2),more=T)
pl2=spplot(cz["Zn.pred"],main="log-zinc prediction")
print(pl2,split=c(1,2,2,2),more=T)
cz$Cd.se=sqrt(cz$Cd.var)
cz$Zn.se=sqrt(cz$Zn.var)
pl3=spplot(cz["Cd.se"],main="log-cadmium standard error")
print(pl3,split=c(2,1,2,2),more=T)
pl4=spplot(cz["Zn.se"],main="log-zinc standard error")
print(pl4,split=c(2,2,2,2),more=T)
# or
library(gridExtra)
cz$Cd.se = sqrt(cz$Cd.var)
cz$Zn.se = sqrt(cz$Zn.var)
pl1 = spplot(cz["Cd.pred"], main = "log-cadmium prediction")
pl2 = spplot(cz["Zn.pred"], main = "log-zinc prediction")
pl3 = spplot(cz["Cd.se"], main = "log-cadmium standard error")
pl4 = spplot(cz["Zn.se"], main = "log-zinc standard error")
grid.arrange(pl1,pl2,pl3,pl4, nrow = 2)
x <- variogram(jura.g, cutoff = 1.3)
jura.fit <- fit.lmc(x, jura.g, vgm(1, "Exp", 1.2, 1))
plot(x, jura.fit)
jura.fit <- fit.lmc(x, jura.g, vgm(1, "Exp", 1.3, 1))
plot(x, jura.fit)
x <- variogram(jura.g, cutoff = 1.4)
jura.fit <- fit.lmc(x, jura.g, vgm(1, "Exp", 1.4, 1))
plot(x, jura.fit)
x <- variogram(jura.g, cutoff = 1.3)
jura.fit <- fit.lmc(x, jura.g, vgm(1, "Exp", 1.3, 1))
plot(x, jura.fit)
x <- variogram(jura.g, cutoff = 1.3)
jura.fit <- fit.lmc(x, jura.g, vgm(1, "Exp", 1.3, 0.6))
plot(x, jura.fit)
x <- variogram(jura.g, cutoff = 1.3)
jura.fit <- fit.lmc(x, jura.g, vgm(1, "Exp", 1.3, 0.25))
plot(x, jura.fit)
x <- variogram(jura.g, cutoff = 1.3)
jura.fit <- fit.lmc(x, jura.g, vgm(1, "Exp", 1.3, 1))
plot(x, jura.fit)
View(jura.pred)
View(jura.grid)
View(jura.pred)
# nickel
plot(Cd ~ Ni, jura.pred)
xyplot(jura.pred$Cd ~ jura.pred$Zn, jura.pred,
main = "Cd by Zinc Concentration",
xlab = "Zinc Concentration",
ylab = "Cd Concentration")
xyplot(jura.pred$Cd ~ jura.pred$Zn, jura.pred,
main = "Cd by Zn Concentration",
xlab = "Zn Concentration",
ylab = "Cd Concentration")
xyplot(jura.pred$Cd ~ jura.pred$Ni, jura.pred,
main = "Cd by Ni Concentration",
xlab = "Ni Concentration",
ylab = "Cd Concentration")
ggplot(as.data.frame(jura.pred), aes(x = Zn, y = Cd)) +
geom_point(col = "blue", alpha = 0.5, size = 2.5) +
geom_smooth(col = "grey", se = F, method = "lm") +
theme_bw() +
ggtitle("Unlogged") +
xlab("Zinc") +
ylab("Cadmium")
x <- variogram(jura.g, cutoff = 1.3)
jura.fit <- fit.lmc(x, jura.g, vgm(1, "Exp", 1.3, 1))
plot(x, jura.fit)
# plot variogram from fitted model
x <- variogram(jura.g)
plot(x)
x <- variogram(jura.g, cutoff = 1.3)
plot(x)
# plot variogram from fitted model
x <- variogram(jura.g)
plot(x)
